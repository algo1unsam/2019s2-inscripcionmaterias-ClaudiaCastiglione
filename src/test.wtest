import alumnos.*
import carreras.*
import materias.*
import sistema.*
import requisitos.*
import registros.*

describe "agrupo test inscripcion" {

test "si un alumno se quiere inscribir en una materia que ya aprobo se rechaza" {
	var ingenieria  = new Carrera()
	var algoritmos = new Materia(carrera = ingenieria, cupo = 50, anio = 0)
	var juan = new Alumno(carrerasInscripto = [ingenieria])
	
	ingenieria.materias().add(algoritmos)
	

	sistema.registrar(juan, algoritmos, 7)
	

	assert.throwsExceptionWithMessage("No se puede inscribir a este alumno en esta materia", {algoritmos.inscribir(juan)})

}

test "si un alumno se quiere inscribir a una materia y le falta una correlativa se rechaza" {
	
	var ingenieria  = new Carrera()
	var matematica = new Materia(carrera = ingenieria, cupo = 50, anio = 0)
	var algoritmos = new Materia(carrera = ingenieria, cupo = 50, anio = 0)
	var algoritmos2 = new Materia(carrera = ingenieria, cupo = 50, anio = 1, requisito = requisitoCorrelativas, correlativas = [algoritmos, matematica])
	var juan = new Alumno(carrerasInscripto = [ingenieria])
	
	ingenieria.materias().add(matematica)
	ingenieria.materias().add(algoritmos)
	ingenieria.materias().add(algoritmos2)
	sistema.registrar(juan, algoritmos, 7)
	
	assert.throwsExceptionWithMessage("No se puede inscribir a este alumno en esta materia", {algoritmos2.inscribir(juan)})
}

test "si un alumno se quiere inscribir y cumple los requisitos, pero no hay cupo la lista de espera deja de estar vacia" {
	
	var ingenieria  = new Carrera()
	var matematica = new Materia(carrera = ingenieria, cupo = 5, anio = 0)
	var juan = new Alumno(carrerasInscripto = [ingenieria])
	var jose = new Alumno(carrerasInscripto = [ingenieria])
	var ana = new Alumno(carrerasInscripto = [ingenieria])
	var juli = new Alumno(carrerasInscripto = [ingenieria])
	var nacho = new Alumno(carrerasInscripto = [ingenieria])
	var clau = new Alumno(carrerasInscripto = [ingenieria])
	
	ingenieria.materias().add(matematica)
	matematica.inscribir(juan)
	matematica.inscribir(jose)
	matematica.inscribir(ana)
	matematica.inscribir(juli)
	matematica.inscribir(nacho)
	matematica.inscribir(clau)
	
	assert.that(matematica.hayAlumnosEnEspera())
	
	
}

test "si un alumno se quiere inscribir y cumple los requisitos, pero no hay cupo esa materia aparece en su lista de condicionales" {
	
	var ingenieria  = new Carrera()
	var matematica = new Materia(carrera = ingenieria, cupo = 5, anio = 0)
	var juan = new Alumno(carrerasInscripto = [ingenieria])
	var jose = new Alumno(carrerasInscripto = [ingenieria])
	var ana = new Alumno(carrerasInscripto = [ingenieria])
	var juli = new Alumno(carrerasInscripto = [ingenieria])
	var nacho = new Alumno(carrerasInscripto = [ingenieria])
	var clau = new Alumno(carrerasInscripto = [ingenieria])
	
	matematica.inscribir(juan)
	matematica.inscribir(jose)
	matematica.inscribir(ana)
	matematica.inscribir(juli)
	matematica.inscribir(nacho)
	matematica.inscribir(clau)
	
	assert.equals(clau.materiasCondicional(), [matematica])
	
	
}

test "si un alumno se quiere inscribir y cumple los requisitos, pero no hay cupo se lo pone en lista de espera" {
	var ingenieria  = new Carrera()
	var juan = new Alumno(carrerasInscripto = [ingenieria])
	/*var jose = new Alumno()
	var ana = new Alumno()
	var juli = new Alumno()
	var nacho = new Alumno()
	var clau = new Alumno()*/
	
	var matematica = new Materia(carrera = ingenieria, cupo = 5, anio = 0)
	
	matematica.inscribir(juan)
	/*matematica.inscribir(jose)
	matematica.inscribir(ana)
	matematica.inscribir(juli)
	matematica.inscribir(nacho)
	matematica.inscribir(clau)*/
	
	assert.equals(matematica.alumnosInscriptos(), [juan])
	
	
}

test "si un alumno se pudo inscribir, cumpliendo las condiciones necesarias" {
	var ingenieria  = new Carrera()
	var matematica = new Materia(carrera = ingenieria, cupo = 5, anio = 0)
	var juan = new Alumno(carrerasInscripto = [ingenieria])
	assert.that(matematica.sePuedeInscribir(juan))
}
}
